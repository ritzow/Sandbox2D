Solomon Ritzow
2D Platformer Game

Application overview:
The application is a 2D sandbox platformer video game. It is a team based game where players on each team must defend their “castle” from the other teams, which are filled with other human players. The game may have only two teams in one game, or it may be reasonable to have more than two teams.

Gameplay: The gameplay is contained in matches or rounds. Once a match begins, there is a build period in which players are restricted to their own region of the game map, during which they can mine for resources using a pickaxe, shovel, or axe, similar to many other sandbox games. Once the build period ends, players can choose a “class” to play as. Each class has a specialization such as ranged or melee combat, or building. The player’s’ objective is to defend their own “statue”, an object located within their team’s region, from being destroyed by other teams, while also attacking the other castles to destroy their statues.

Interface: The game will have menus like many other video games: a main menu, options screen, multiplayer connect menu, about page, lobby screen (for setting up a match before it begins), and pause menu during matches. The interface manager I currently have allows for buttons and elements to be positioned on the screen based on a ratio of the screen width and height (for menus), or be clamped to the edge of the screen with an offset from the edge (for things like the player’s HUD).

Justification: I enjoy playing the game King Arthur’s Gold, which is the game that my game takes inspiration from, but King Arthur’s Gold is sometimes slow running and overall, not polished. I plan to make a (hopefully) more polished game by writing the game entirely in Java, rather than using scripts and other clunky features that slow the game down. The game will be able to run on Windows, Mac, and Linux, using the OpenGL Graphics API for rendering, OpenAL for audio, and GLFW, a cross-platform library for window and input management available for all three platforms.

Scenarios: 
●	From booting up the game, the user can:
	○	Priority 3: Enter the options menu by clicking on the “options” button, and change any settings that I decide should be modifiable by the player.
	○	Priority 4: Enter the about screen by clicking on the “about” button, and read about the libraries and APIs used to make the program (licenses also) as well as the credits of who wrote the program.
	○	Priority 2: Enter the multiplayer connect menu by clicking the “multiplayer” button.
	○	Priority 1: Enter the sandbox select menu, by clicking on the “sandbox” button, and create a world based on rudimentary procedural generation, or load and modify an existing map in the player’s library.
●	From the multiplayer connect menu.
	○	Connect to an IP address and port number by entering them in text fields.
	○	Once the game has connected to a server, the user can see the lobby screen, which displays a list of the players on the server, their teams, and other information about the current game mode, map, etc.
●	From the sandbox menu:
	○	Priority 2: The user can select a map from the user’s map library, stored in the game’s file directory, and the world will be loaded for the player to build in.
	○	Priority 1: The user can create a new generated world, and select whether they should be in infinite resource mode or normal build mode.
●	While in game (in a world):
	○	Priority 1: The user can press the ‘escape’ key to open the pause/game menu, from which they can click the “resume” button or press the ‘escape’ key again to close, click the “options” button to open the options menu (same as on main menu), or select the “save and quit” or “disconnect” button, based on whether they are in a sandbox or multiplayer game.
	○	Priority 3: The user can press the “inventory” key to open the player inventory management screen.
	○	Priority 2: The user can hover over an interact-able entity and press the interact key to use objects in the game world.

Goals: Be able to do everything listed in the scenarios section on a Windows, Mac, or Linux computer.

Non-goals: The game will not be a fully complete game that will be released to the public, I am simply making it to learn about game/game engine development and to improve my programming ability, although I do hope to make it playable between computers over the internet, ie with friends.
