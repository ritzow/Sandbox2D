Re-implement ping
Implement dead reckoning
synchronize random seed value (send from server to client on connect) for things like item entity bouncing so they can be performed client-side as well to look more in sync
Implement lighting
openal device selection re-connection
Add chunk loading and generation to BlockGrid and Client/Server
Client world mesh generation for GPU for faster graphics
Optimize texture atlas space usage (instead of curret dumb "solution")
Switch OpenGL code to use direct-state-access functions that require OpenGL 4.3
Implement Vulkan renderer
Add binary glTF support
Create a positioning system for in-game complex models that GUI elements have (ie can assume standard scaling and centered at origin rendering)
Possibly implement GUI control "consumption" ie a gui element can prevent other gui elements from knowing about mouse hovers, button presses, etc.
use dynamic lighting system to light up areas with light sources.
Add parallel deserialization/serialization, perhaps with a new readObject like method.
	Maybe also add a parallel top-level deserialization that allows doing something while waiting.
Implement Java Cleaner actions for native OpenGL and other resources
Use CommandLineToArgvW to parse command line args in native launcher.
https://stackoverflow.com/questions/298830/split-string-containing-command-line-parameters-into-string-in-c-sharp
Rename GameLoop.run to GameLoop.runNext
Stop using GameLoop where possible, use static methods that contain a game loop which call another game loop directly, or use GameLoop in conjunction with passing in a "back" reference to tell the loop what the action "back" or "exit" should do (ie return to main menu or return to server browser).